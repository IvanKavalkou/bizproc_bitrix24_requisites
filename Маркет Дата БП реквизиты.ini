<?
if (!defined("B_PROLOG_INCLUDED") || B_PROLOG_INCLUDED !== true) {
    die();
}

// Функция для записи логов
function writeLog($message) {
    $logMessage = date('Y-m-d H:i:s') . " - " . (is_array($message) ? print_r($message, true) : $message) . "\n";
    error_log($logMessage, 3, $_SERVER['DOCUMENT_ROOT'] . '/log_requisites.txt');
}

// Функция для выполнения REST-запросов через входящий вебхук
function callRestApi($method, $params = []) {
    $webhookUrl = 'https://bitrix.pricing.su/rest/1/08ycziwz54sv3tu3/'; // Ваш входящий вебхук
    $queryUrl = $webhookUrl . $method;
    $queryData = http_build_query($params);

    $curl = curl_init();
    curl_setopt_array($curl, [
        CURLOPT_SSL_VERIFYPEER => 0,
        CURLOPT_POST => 1,
        CURLOPT_HEADER => 0,
        CURLOPT_RETURNTRANSFER => 1,
        CURLOPT_URL => $queryUrl,
        CURLOPT_POSTFIELDS => $queryData,
    ]);

    $result = curl_exec($curl);
    curl_close($curl);

    return json_decode($result, true);
}

// Функция для очистки адреса от лишних данных (всего, что после |)
function cleanAddress($address) {
    $parts = explode('|', $address); // Разделяем строку по символу |
    return trim($parts[0]); // Возвращаем первую часть (основной адрес)
}

// Основной код
if (CModule::IncludeModule('crm')) {
    writeLog("=== Начало выполнения скрипта ===");

    // Получаем корневую активность
    $root = $this->GetRootActivity();

    // Получаем значения из переменных бизнес-процесса
    $ENTITY_ID = $root->GetVariable('ENTITY_ID');
    $PRESET_ID = $root->GetVariable('PRESET_ID');
    $NAME = $root->GetVariable('NAME');

    writeLog("Основные параметры:");
    writeLog([
        'ENTITY_ID' => $ENTITY_ID,
        'PRESET_ID' => $PRESET_ID,
        'NAME' => $NAME
    ]);

    // Получаем адреса
    $ADDRESS_ARRAY_YUR = $root->GetVariable('ADDRESS_ARRAY_YUR');
    $ADDRESS_ARRAY_POST = $root->GetVariable('ADDRESS_ARRAY_POST');

    writeLog("ADDRESS_ARRAY_YUR до обработки:");
    writeLog($ADDRESS_ARRAY_YUR);

    writeLog("ADDRESS_ARRAY_POST до обработки:");
    writeLog($ADDRESS_ARRAY_POST);

    // Обработка адресов
    $addressYur = cleanAddress($ADDRESS_ARRAY_YUR); // Очищенный юридический адрес
    $addressPost = cleanAddress($ADDRESS_ARRAY_POST); // Очищенный почтовый адрес

    // Очистка адреса банка
    $bankAddress = cleanAddress($root->GetVariable('bank_address'));

    // Получаем остальные реквизиты
    $Fields = [
        'PRESET_ID' => $PRESET_ID,
        'NAME' => $NAME,
        'ACTIVE' => 'Y',
        'ENTITY_TYPE_ID' => 4,
        'ENTITY_ID' => $ENTITY_ID,
        'SORT' => 500,
        'RQ_ACCOUNTANT' => $root->GetVariable('ACCOUNTANT'),
        'RQ_COMPANY_FULL_NAME' => $root->GetVariable('COMPANY_FULL_NAME'),
        'RQ_COMPANY_NAME' => $root->GetVariable('company_name'),
        'RQ_COMPANY_REG_DATE' => $root->GetVariable('COMPANY_REG_DATE'),
        'RQ_DIRECTOR' => $root->GetVariable('DIRECTOR'),
        'RQ_EMAIL' => $root->GetVariable('EMAIL'),
        'RQ_FAX' => $root->GetVariable('FAX'),
        'RQ_INN' => $root->GetVariable('INN'),
        'RQ_KPP' => $root->GetVariable('cpmpany_KPP'),
        'RQ_OGRN' => $root->GetVariable('ogrn'),
        'RQ_OGRNIP' => $root->GetVariable('OGRNIP'),
        'RQ_OKPO' => $root->GetVariable('OKPO'),
        'RQ_OKTMO' => $root->GetVariable('OKTMO'),
        'RQ_OKVED' => $root->GetVariable('OKVED'),
        'RQ_PHONE' => $root->GetVariable('PHONE'),
        'RQ_ST_CERT_DATE' => $root->GetVariable('ST_CERT_DATE'),
        'RQ_ST_CERT_NUM' => $root->GetVariable('ST_CERT_NUM'),
        'RQ_BANK_ADDRESS' => $bankAddress, // Очищенный адрес банка
        'RQ_BANK_BIK' => $root->GetVariable('bank_bik'),
        'RQ_BANK_CORR' => $root->GetVariable('bank_corr'),
        'RQ_BANK_INN' => $root->GetVariable('bank_inn'),
        'RQ_BANK_NAME' => $root->GetVariable('bank_name'),
        'RQ_BANK_TEL' => $root->GetVariable('bank_tel'),
        'RQ_ACC_NUM' => $root->GetVariable('acc_num'),
        'RQ_ADDR' => [
            '6' => [ // Юридический адрес
                'ADDRESS_1' => $addressYur, // Очищенный адрес
                'ADDRESS_2' => '', // Дополнительная строка адреса (если нужно)
                'CITY' => '', // Город (если известен)
                'POSTAL_CODE' => '', // Почтовый индекс (если известен)
                'REGION' => '', // Регион (если известен)
                'PROVINCE' => '', // Область (если известен)
                'COUNTRY' => '', // Страна (если известна)
            ],
            '1' => [ // Почтовый адрес
                'ADDRESS_1' => $addressPost, // Очищенный адрес
                'ADDRESS_2' => '', // Дополнительная строка адреса (если нужно)
                'CITY' => '', // Город (если известен)
                'POSTAL_CODE' => '', // Почтовый индекс (если известен)
                'REGION' => '', // Регион (если известен)
                'PROVINCE' => '', // Область (если известен)
                'COUNTRY' => '', // Страна (если известна)
            ]
        ]
    ];

    writeLog("=== Данные для создания реквизита ===");
    writeLog($Fields);

    try {
        $requisite = new \Bitrix\Crm\EntityRequisite();
        $result = $requisite->add($Fields);

        if ($result->isSuccess()) {
            $requisiteId = $result->getId();
            writeLog("Реквизит успешно создан (ID: " . $requisiteId . ")");
            $root->SetVariable('REQUISITE_ID', $requisiteId);

            // Добавляем банковские реквизиты
            if ($root->GetVariable('bank_name')) {
                $bankFields = [
                    'ENTITY_TYPE_ID' => 8,
                    'ENTITY_ID' => $requisiteId,
                    'COUNTRY_ID' => $PRESET_ID,
                    'NAME' => $root->GetVariable('bank_name'),
                    'ACTIVE' => 'Y',
                    'SORT' => 500,
                    'RQ_BANK_NAME' => $root->GetVariable('bank_name'),
                    'RQ_BANK_ADDR' => $bankAddress, // Очищенный адрес банка
                    'RQ_BIK' => $root->GetVariable('bank_bik'),
                    'RQ_ACC_NUM' => $root->GetVariable('acc_num'),
                    'RQ_COR_ACC_NUM' => $root->GetVariable('bank_corr'),
                    'RQ_BANK_INN' => $root->GetVariable('bank_inn'),
                    'RQ_BANK_TEL' => $root->GetVariable('bank_tel')
                ];

                writeLog("=== Данные банковских реквизитов ===");
                writeLog($bankFields);

                $bankResult = callRestApi('crm.requisite.bankdetail.add', ['fields' => $bankFields]);
                if (isset($bankResult['result'])) {
                    $bankDetailId = $bankResult['result'];
                    writeLog("Банковские реквизиты успешно созданы (ID: " . $bankDetailId . ")");
                    $root->SetVariable('BANK_DETAIL_ID', $bankDetailId);
                } else {
                    writeLog("Ошибка создания банковских реквизитов: " . print_r($bankResult, true));
                }
            }
        } else {
            writeLog("Ошибка создания реквизита: " . implode(', ', $result->getErrorMessages()));
        }
    } catch (\Exception $e) {
        writeLog("Исключение при создании реквизита: " . $e->getMessage());
    }

    writeLog("=== Завершение выполнения ===");
}
?>
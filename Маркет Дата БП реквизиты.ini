if (!defined("B_PROLOG_INCLUDED") || B_PROLOG_INCLUDED !== true) {
    die();
}

if (CModule::IncludeModule('crm'))
{
    // Получаем значения из переменных бизнес-процесса
    $ENTITY_ID = $this->GetVariable('ENTITY_ID');
    $PRESET_ID = $this->GetVariable('PRESET_ID');
    $NAME = $this->GetVariable('NAME');

    // Реквизиты компании
    $RQ_ACCOUNTANT = $this->GetVariable('ACCOUNTANT'); // Гл. бухгалтер
    $RQ_COMPANY_FULL_NAME = $this->GetVariable('COMPANY_FULL_NAME'); // Полное наименование организации
    $RQ_COMPANY_NAME = $this->GetVariable('company_name'); // Название организации
    $RQ_COMPANY_REG_DATE = $this->GetVariable('COMPANY_REG_DATE'); // Дата государственной регистрации
    $RQ_DIRECTOR = $this->GetVariable('DIRECTOR'); // Ген. директор
    $RQ_EMAIL = $this->GetVariable('EMAIL'); // E-Mail
    $RQ_FAX = $this->GetVariable('FAX'); // Факс
    $RQ_INN = $this->GetVariable('INN'); // ИНН/УНП
    $RQ_KPP = $this->GetVariable('cpmpany_KPP'); // КПП
    $RQ_OGRN = $this->GetVariable('ogrn'); // ОГРН
    $RQ_OGRNIP = $this->GetVariable('OGRNIP'); // ОГРНИП
    $RQ_OKPO = $this->GetVariable('OKPO'); // ОКПО
    $RQ_OKTMO = $this->GetVariable('OKTMO'); // ОКТМО
    $RQ_OKVED = $this->GetVariable('OKVED'); // ОКВЭД
    $RQ_PHONE = $this->GetVariable('PHONE'); // Телефон
    $RQ_ST_CERT_DATE = $this->GetVariable('ST_CERT_DATE'); // Дата св. о гос. регистрации
    $RQ_ST_CERT_NUM = $this->GetVariable('ST_CERT_NUM'); // Номер св. о гос. регистрации

    // Реквизиты банка
    $RQ_BANK_ADDRESS = $this->GetVariable('bank_address'); // Юр. Адрес банка
    $RQ_BANK_BIK = $this->GetVariable('bank_bik'); // Бик Банка
    $RQ_BANK_CORR = $this->GetVariable('bank_corr'); // Корреспондентский счет банка
    $RQ_BANK_INN = $this->GetVariable('bank_inn'); // Инн Банка
    $RQ_BANK_NAME = $this->GetVariable('bank_name'); // Название банка
    $RQ_BANK_TEL = $this->GetVariable('bank_tel'); // Телефон банка

    // Пользовательские поля в компании
    $UF_CRM_1723550406 = $this->GetVariable('UF_CRM_1723550406'); // Сайт
    $UF_CRM_1722846152 = $this->GetVariable('UF_CRM_1722846152'); // Основание действия (Род.падеж)
    $UF_CRM_1722846101 = $this->GetVariable('UF_CRM_1722846101'); // Должность подписанта
    $UF_CRM_1722849111 = $this->GetVariable('UF_CRM_1722849111'); // Должность подписанта (Род.падеж)

    // Адрес организации
    $ADDRESS_ARRAY_YUR = $this->GetVariable('ADDRESS_ARRAY_YUR'); // Юр. адрес организации
    $ADDRESS_ARRAY_POST = $this->GetVariable('ADDRESS_ARRAY_POST'); // Почт. адрес организации

    // Проверяем, что все необходимые данные есть
    if($ENTITY_ID && $PRESET_ID && $NAME)
    {
        // Параметры для добавления реквизита
        $Fields = [
            'PRESET_ID' => $PRESET_ID,
            'NAME' => $NAME,
            'ACTIVE' => 'Y',
            'ENTITY_TYPE_ID' => '4',
            'ENTITY_ID' => $ENTITY_ID,
            'SORT' => 1, // Устанавливаем порядок в списке реквизитов
            'RQ_ACCOUNTANT' => $RQ_ACCOUNTANT,
            'RQ_COMPANY_FULL_NAME' => $RQ_COMPANY_FULL_NAME,
            'RQ_COMPANY_NAME' => $RQ_COMPANY_NAME,
            'RQ_COMPANY_REG_DATE' => $RQ_COMPANY_REG_DATE,
            'RQ_DIRECTOR' => $RQ_DIRECTOR,
            'RQ_EMAIL' => $RQ_EMAIL,
            'RQ_FAX' => $RQ_FAX,
            'RQ_INN' => $RQ_INN,
            'RQ_KPP' => $RQ_KPP,
            'RQ_OGRN' => $RQ_OGRN,
            'RQ_OGRNIP' => $RQ_OGRNIP,
            'RQ_OKPO' => $RQ_OKPO,
            'RQ_OKTMO' => $RQ_OKTMO,
            'RQ_OKVED' => $RQ_OKVED,
            'RQ_PHONE' => $RQ_PHONE,
            'RQ_ST_CERT_DATE' => $RQ_ST_CERT_DATE,
            'RQ_ST_CERT_NUM' => $RQ_ST_CERT_NUM,
            'RQ_BANK_ADDRESS' => $RQ_BANK_ADDRESS,
            'RQ_BANK_BIK' => $RQ_BANK_BIK,
            'RQ_BANK_CORR' => $RQ_BANK_CORR,
            'RQ_BANK_INN' => $RQ_BANK_INN,
            'RQ_BANK_NAME' => $RQ_BANK_NAME,
            'RQ_BANK_TEL' => $RQ_BANK_TEL,
            'UF_CRM_1723550406' => $UF_CRM_1723550406,
            'UF_CRM_1722846152' => $UF_CRM_1722846152,
            'UF_CRM_1722846101' => $UF_CRM_1722846101,
            'UF_CRM_1722849111' => $UF_CRM_1722849111,
            'ADDRESS_ONLY' => "N",
        ];

        $requisite = new \Bitrix\Crm\EntityRequisite();
        $result = $requisite->add($Fields);

        if ($result->isSuccess()) {
            $requisiteId = $result->getId();
            echo 'Реквизит успешно создан (ID: ' . $requisiteId . ')' . PHP_EOL;
            $this->SetVariable('REQUISITE_ID', $requisiteId);

            // Параметры для добавления банковского реквизита
            $bankFields = [
                'ENTITY_TYPE_ID' => 8,
                'ENTITY_ID' => $requisiteId,
                'COUNTRY_ID' => $PRESET_ID, // Код страны банковского реквизита совпадает с кодом страны в привязанном шаблоне реквизитов
                'NAME' => $RQ_BANK_NAME,
                'ACTIVE' => 'Y',
                'RQ_IBAN' => $RQ_BANK_CORR, // IBAN
                'RQ_SWIFT' => $RQ_BANK_BIK, // SWIFT
            ];

            $bankDetail = new \Bitrix\Crm\EntityBankDetail();
            $bankResult = $bankDetail->add($bankFields);

            if ($bankResult->isSuccess()) {
                $bankDetailId = $bankResult->getId();
                echo 'Банковский реквизит успешно создан (ID: ' . $bankDetailId . ')' . PHP_EOL;
                $this->SetVariable('BANK_DETAIL_ID', $bankDetailId);
            } else {
                $bankErrors = $bankResult->getErrorMessages();
                echo 'Ошибка создания банковского реквизита: ' . implode(', ', $bankErrors) . PHP_EOL;
            }

            // Добавление юридического адреса организации
            if (!empty($ADDRESS_ARRAY_YUR)) {
                $addressFields = [
                    'TYPE_ID' => 6, // Юридический адрес
                    'ENTITY_TYPE_ID' => 8, // Реквизиты
                    'ENTITY_ID' => $requisiteId,
                    'ADDRESS_1' => $ADDRESS_ARRAY_YUR['ADDRESS_1'],
                    'ADDRESS_2' => $ADDRESS_ARRAY_YUR['ADDRESS_2'],
                    'CITY' => $ADDRESS_ARRAY_YUR['CITY'],
                    'POSTAL_CODE' => $ADDRESS_ARRAY_YUR['POSTAL_CODE'],
                    'REGION' => $ADDRESS_ARRAY_YUR['REGION'],
                    'PROVINCE' => $ADDRESS_ARRAY_YUR['PROVINCE'],
                    'COUNTRY' => $ADDRESS_ARRAY_YUR['COUNTRY'],
                ];

                $addressResult = \Bitrix\Crm\AddressTable::add($addressFields);

                if ($addressResult->isSuccess()) {
                    $addressId = $addressResult->getId();
                    echo 'Юридический адрес организации успешно создан (ID: ' . $addressId . ')' . PHP_EOL;
                    $this->SetVariable('ADDRESS_ID_YUR', $addressId);
                } else {
                    $addressErrors = $addressResult->getErrorMessages();
                    echo 'Ошибка создания юридического адреса организации: ' . implode(', ', $addressErrors) . PHP_EOL;
                }
            }

            // Добавление почтового адреса организации
            if (!empty($ADDRESS_ARRAY_POST)) {
                $addressFields = [
                    'TYPE_ID' => 1, // Почтовый адрес
                    'ENTITY_TYPE_ID' => 8, // Реквизиты
                    'ENTITY_ID' => $requisiteId,
                    'ADDRESS_1' => $ADDRESS_ARRAY_POST['ADDRESS_1'],
                    'ADDRESS_2' => $ADDRESS_ARRAY_POST['ADDRESS_2'],
                    'CITY' => $ADDRESS_ARRAY_POST['CITY'],
                    'POSTAL_CODE' => $ADDRESS_ARRAY_POST['POSTAL_CODE'],
                    'REGION' => $ADDRESS_ARRAY_POST['REGION'],
                    'PROVINCE' => $ADDRESS_ARRAY_POST['PROVINCE'],
                    'COUNTRY' => $ADDRESS_ARRAY_POST['COUNTRY'],
                ];

                $addressResult = \Bitrix\Crm\AddressTable::add($addressFields);

                if ($addressResult->isSuccess()) {
                    $addressId = $addressResult->getId();
                    echo 'Почтовый адрес организации успешно создан (ID: ' . $addressId . ')' . PHP_EOL;
                    $this->SetVariable('ADDRESS_ID_POST', $addressId);
                } else {
                    $addressErrors = $addressResult->getErrorMessages();
                    echo 'Ошибка создания почтового адреса организации: ' . implode(', ', $addressErrors) . PHP_EOL;
                }
            }

            // Добавление адреса банка
            if (!empty($RQ_BANK_ADDRESS)) {
                $bankAddressFields = [
                    'TYPE_ID' => 6, // Юридический адрес банка
                    'ENTITY_TYPE_ID' => 8, // Реквизиты
                    'ENTITY_ID' => $bankDetailId,
                    'ADDRESS_1' => $RQ_BANK_ADDRESS['ADDRESS_1'],
                    'ADDRESS_2' => $RQ_BANK_ADDRESS['ADDRESS_2'],
                    'CITY' => $RQ_BANK_ADDRESS['CITY'],
                    'POSTAL_CODE' => $RQ_BANK_ADDRESS['POSTAL_CODE'],
                    'REGION' => $RQ_BANK_ADDRESS['REGION'],
                    'PROVINCE' => $RQ_BANK_ADDRESS['PROVINCE'],
                    'COUNTRY' => $RQ_BANK_ADDRESS['COUNTRY'],
                ];

                $bankAddressResult = \Bitrix\Crm\AddressTable::add($bankAddressFields);

                if ($bankAddressResult->isSuccess()) {
                    $bankAddressId = $bankAddressResult->getId();
                    echo 'Адрес банка успешно создан (ID: ' . $bankAddressId . ')' . PHP_EOL;
                    $this->SetVariable('BANK_ADDRESS_ID', $bankAddressId);
                } else {
                    $bankAddressErrors = $bankAddressResult->getErrorMessages();
                    echo 'Ошибка создания адреса банка: ' . implode(', ', $bankAddressErrors) . PHP_EOL;
                }
            }
        } else {
            $errors = $result->getErrorMessages();
            echo 'Ошибка создания реквизита: ' . implode(', ', $errors) . PHP_EOL;
        }
    } else {
        echo "Ошибка: Не удалось получить необходимые данные". PHP_EOL;
    }
}

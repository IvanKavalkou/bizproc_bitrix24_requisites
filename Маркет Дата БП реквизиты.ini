<?
if (!defined("B_PROLOG_INCLUDED") || B_PROLOG_INCLUDED !== true) {
    die();
}

function writeLog($message) {
    error_log(date('Y-m-d H:i:s') . " - " . print_r($message, true) . "\n", 3, $_SERVER['DOCUMENT_ROOT'] . '/log_requisites.log');
}

function parseAddress($addressString, $type = 'YUR') {
    $addressArray = [
        'ADDRESS_1' => '',
        'ADDRESS_2' => '',
        'CITY' => '',
        'POSTAL_CODE' => '',
        'REGION' => '',
        'PROVINCE' => '',
        'COUNTRY' => ''
    ];

    // Очищаем строку от координат и дополнительных данных
    $parts = explode('|', $addressString);
    $mainAddress = trim($parts[0]);

    // Стандартизация названий стран
    $countryMap = [
        'беларусь' => 'Республика Беларусь',
        'республика беларусь' => 'Республика Беларусь',
        'рб' => 'Республика Беларусь',
        'россия' => 'Российская Федерация',
        'российская федерация' => 'Российская Федерация',
        'рф' => 'Российская Федерация',
        'узбекистан' => 'Республика Узбекистан'
    ];

    // Разбиваем адрес на компоненты
    $addressParts = array_map('trim', explode(',', $mainAddress));

    // Обработка страны (последний элемент)
    $lastPart = mb_strtolower(trim(end($addressParts)));
    foreach ($countryMap as $variant => $standardName) {
        if (mb_strpos($lastPart, $variant) !== false) {
            $addressArray['COUNTRY'] = $standardName;
            array_pop($addressParts);
            break;
        }
    }

    // Поиск и извлечение почтового индекса
    foreach ($addressParts as $key => $part) {
        if (preg_match('/\b(\d{6})\b/', $part, $matches)) {
            $addressArray['POSTAL_CODE'] = $matches[1];
            $addressParts[$key] = trim(str_replace($matches[1], '', $part));
            if (empty($addressParts[$key])) {
                unset($addressParts[$key]);
            }
            break;
        }
    }

    // Обработка улицы и номера дома
    $streetPatterns = [
        // улица с номером дома
        '/^((?:ул\.?|улица|пр\.?|проспект|пер\.?|переулок|б-р\.?|бульвар|пл\.?|площадь|наб\.?|набережная)\s+[\w\s-]+)[,\s]+(?:д\.?|дом)?\s*(\d+(?:\/\d+)?(?:\s*(?:к\.?|корп\.?|корпус|стр\.?|строение)\s*\d+)?)[,\s]*(?:кв\.?|квартира|офис|оф\.?)?\s*(\d+)?/ui',
        // улица с номером дома без указания типа улицы
        '/^([\w\s-]+(?:ая|ья|ая|ое|ое|ые|ие)\s+(?:улица|проспект|переулок|бульвар|площадь|набережная))[,\s]+(?:д\.?|дом)?\s*(\d+(?:\/\d+)?(?:\s*(?:к\.?|корп\.?|корпус|стр\.?|строение)\s*\d+)?)[,\s]*(?:кв\.?|квартира|офис|оф\.?)?\s*(\d+)?/ui'
    ];

    $streetFound = false;
    foreach ($streetPatterns as $pattern) {
        if (preg_match($pattern, $addressParts[0], $matches)) {
            $addressArray['ADDRESS_1'] = trim($matches[1] . ', ' . $matches[2]);
            if (!empty($matches[3])) {
                $addressArray['ADDRESS_2'] = 'кв. ' . $matches[3];
            }
            array_shift($addressParts);
            $streetFound = true;
            break;
        }
    }

    // Если улица не найдена по шаблонам, берем первый элемент как есть
    if (!$streetFound && !empty($addressParts[0])) {
        $addressArray['ADDRESS_1'] = trim($addressParts[0]);
        array_shift($addressParts);
    }

    // Обработка оставшихся частей
    $addressParts = array_values(array_filter($addressParts));
    
    if (count($addressParts) > 0) {
        // Поиск города
        $cityPatterns = [
            '/^(?:г\.?\s*)?([А-Я][а-яА-Я\s-]+)$/u',
            '/^([А-Я][а-яА-Я\s-]+)(?:\s+(?:город|г\.?))?$/u'
        ];

        foreach ($addressParts as $key => $part) {
            foreach ($cityPatterns as $pattern) {
                if (preg_match($pattern, trim($part), $matches)) {
                    $addressArray['CITY'] = trim($matches[1]);
                    unset($addressParts[$key]);
                    break 2;
                }
            }
        }

        // Обработка области/края/региона
        $addressParts = array_values(array_filter($addressParts));
        if (!empty($addressParts)) {
            $regionKeywords = ['область', 'край', 'республика', 'АО'];
            foreach ($addressParts as $key => $part) {
                foreach ($regionKeywords as $keyword) {
                    if (mb_stripos($part, $keyword) !== false) {
                        $addressArray['PROVINCE'] = trim($part);
                        unset($addressParts[$key]);
                        break 2;
                    }
                }
            }
        }

        // Если остались необработанные части, добавляем их в регион
        $addressParts = array_values(array_filter($addressParts));
        if (!empty($addressParts)) {
            if (empty($addressArray['REGION'])) {
                $addressArray['REGION'] = implode(', ', $addressParts);
            }
        }
    }

    return $addressArray;
}

// Основной код
if (CModule::IncludeModule('crm')) {
    writeLog("=== Начало выполнения скрипта ===");

    // Получаем значения из переменных бизнес-процесса
    $ENTITY_ID = $this->GetVariable('ENTITY_ID');
    $PRESET_ID = $this->GetVariable('PRESET_ID');
    $NAME = $this->GetVariable('NAME');

    writeLog("Основные параметры:");
    writeLog([
        'ENTITY_ID' => $ENTITY_ID,
        'PRESET_ID' => $PRESET_ID,
        'NAME' => $NAME
    ]);

    // Получаем и обрабатываем адреса
    $addressYurString = $this->GetVariable('ADDRESS_ARRAY_YUR');
    $addressPostString = $this->GetVariable('ADDRESS_ARRAY_POST');

    writeLog("ADDRESS_ARRAY_YUR до обработки:");
    writeLog($addressYurString);
    $addressArrayYur = parseAddress($addressYurString, 'YUR');
    writeLog("Юридические адресные данные после обработки:");
    writeLog($addressArrayYur);

    writeLog("ADDRESS_ARRAY_POST до обработки:");
    writeLog($addressPostString);
    $addressArrayPost = parseAddress($addressPostString, 'POST');
    writeLog("Почтовые адресные данные после обработки:");
    writeLog($addressArrayPost);

    // Получаем остальные реквизиты
    $Fields = [
        'PRESET_ID' => $PRESET_ID,
        'NAME' => $NAME,
        'ACTIVE' => 'Y',
        'ENTITY_TYPE_ID' => 4,
        'ENTITY_ID' => $ENTITY_ID,
        'SORT' => 500,
        'RQ_ACCOUNTANT' => $this->GetVariable('ACCOUNTANT'),
        'RQ_COMPANY_FULL_NAME' => $this->GetVariable('COMPANY_FULL_NAME'),
        'RQ_COMPANY_NAME' => $this->GetVariable('company_name'),
        'RQ_COMPANY_REG_DATE' => $this->GetVariable('COMPANY_REG_DATE'),
        'RQ_DIRECTOR' => $this->GetVariable('DIRECTOR'),
        'RQ_EMAIL' => $this->GetVariable('EMAIL'),
        'RQ_FAX' => $this->GetVariable('FAX'),
        'RQ_INN' => $this->GetVariable('INN'),
        'RQ_KPP' => $this->GetVariable('cpmpany_KPP'),
        'RQ_OGRN' => $this->GetVariable('ogrn'),
        'RQ_OGRNIP' => $this->GetVariable('OGRNIP'),
        'RQ_OKPO' => $this->GetVariable('OKPO'),
        'RQ_OKTMO' => $this->GetVariable('OKTMO'),
        'RQ_OKVED' => $this->GetVariable('OKVED'),
        'RQ_PHONE' => $this->GetVariable('PHONE'),
        'RQ_ST_CERT_DATE' => $this->GetVariable('ST_CERT_DATE'),
        'RQ_ST_CERT_NUM' => $this->GetVariable('ST_CERT_NUM'),
        'RQ_ADDR' => [
            '6' => $addressArrayYur,    // Юридический адрес
            '1' => $addressArrayPost    // Почтовый адрес
        ]
    ];

    writeLog("=== Данные для создания реквизита ===");
    writeLog($Fields);

    try {
        $requisite = new \Bitrix\Crm\EntityRequisite();
        $result = $requisite->add($Fields);

        if ($result->isSuccess()) {
            $requisiteId = $result->getId();
            writeLog("Реквизит успешно создан (ID: " . $requisiteId . ")");

            // Добавляем банковские реквизиты
            if ($this->GetVariable('bank_name')) {
                $bankFields = [
                    'ENTITY_TYPE_ID' => 8,
                    'ENTITY_ID' => $requisiteId,
                    'COUNTRY_ID' => $PRESET_ID,
                    'NAME' => $this->GetVariable('bank_name'),
                    'ACTIVE' => 'Y',
                    'SORT' => 500,
                    'RQ_BANK_NAME' => $this->GetVariable('bank_name'),
                    'RQ_BANK_ADDR' => $this->GetVariable('bank_address'),
                    'RQ_BIC' => $this->GetVariable('bank_bik'),
                    'RQ_ACC_NUM' => $this->GetVariable('acc_num'),
                    'RQ_COR_ACC_NUM' => $this->GetVariable('bank_corr'),
                    'RQ_BANK_INN' => $this->GetVariable('bank_inn'),
                    'RQ_BANK_TEL' => $this->GetVariable('bank_tel')
                ];

                writeLog("=== Данные банковских реквизитов ===");
                writeLog($bankFields);

                $bankDetail = new \Bitrix\Crm\EntityBankDetail();
                $bankResult = $bankDetail->add($bankFields);

                if ($bankResult->isSuccess()) {
                    $bankDetailId = $bankResult->getId();
                    writeLog("Банковские реквизиты успешно созданы (ID: " . $bankDetailId . ")");
                }
            }
        }
    } catch (\Exception $e) {
        writeLog("Ошибка: " . $e->getMessage());
    }

    writeLog("=== Завершение выполнения ===");
}
?>
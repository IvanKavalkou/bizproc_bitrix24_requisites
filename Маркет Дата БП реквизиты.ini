if (!defined("B_PROLOG_INCLUDED") || B_PROLOG_INCLUDED !== true) {
    die();
}

/**
 * Система управления реквизитами компании в Битрикс24
 * 
 * Список используемых полей:
 * 
 * Основные параметры:
 * PRESET_ID - ID реквизитов
 * ENTITY_ID - ID компании
 * NAME - Реквизит NAME
 * COUNTRY_ID - id страны шаблона реквизитов
 * 
 * Данные организации:
 * RQ_ACCOUNTANT - Главный бухгалтер
 * RQ_COMPANY_FULL_NAME - Полное наименование организации (обязательное)
 * RQ_COMPANY_NAME - Краткое название организации (company_name) (обязательное)
 * RQ_COMPANY_REG_DATE - Дата государственной регистрации
 * RQ_DIRECTOR - ФИО директора (обязательное)
 * RQ_EMAIL - E-Mail организации
 * RQ_FAX - Факс
 * RQ_INN - УНП (обязательное)
 * RQ_KPP - КПП (company_KPP) (обязательное)
 * RQ_OGRN - ОГРН (ogrn) (обязательное)
 * RQ_OGRNIP - ОГРНИП
 * RQ_OKPO - ОКПО
 * RQ_OKTMO - ОКТМО
 * RQ_OKVED - ОКВЭД
 * RQ_PHONE - Телефон
 * RQ_ST_CERT_DATE - Дата свидетельства о гос. регистрации
 * RQ_ST_CERT_NUM - Номер свидетельства о гос. регистрации
 * 
 * Адреса (обязательные):
 * ADDRESS_ARRAY_YUR - Юридический адрес
 * ADDRESS_ARRAY_POST - Почтовый адрес
 * 
 * Пользовательские поля:
 * UF_CRM_1723550406 - Сайт
 * UF_CRM_1722846152 - Основание действия (род. падеж) (обязательное)
 * UF_CRM_1722846101 - Должность подписанта (обязательное)
 * UF_CRM_1722849111 - Должность подписанта (род. падеж) (обязательное)
 * 
 * Банковские реквизиты:
 * bank_address - Юридический адрес банка
 * bank_bik - БИК банка (обязательное)
 * bank_corr - Корреспондентский счет банка
 * bank_inn - ИНН банка
 * bank_name - Название банка (обязательное)
 * bank_tel - Телефон банка
 * SWIFT - SWIFT-код банка
 * acc_num - Расчетный счет (обязательное)
 * 
 * Служебные поля:
 * executor - Пользователь, создающий реквизиты
 */

/**
 * Класс для работы с логированием
 * Обеспечивает запись всех действий и ошибок в лог-файл
 */
class Logger {
    private string $logFile;
    
    public function __construct() {
        $this->logFile = $_SERVER['DOCUMENT_ROOT'] . '/local/rq_log/log_reqisite.log';
        $this->ensureLogDirectoryExists();
    }
    
    private function ensureLogDirectoryExists(): void {
        $logDir = dirname($this->logFile);
        if (!is_dir($logDir)) {
            mkdir($logDir, 0755, true);
        }
    }
    
    public function log($message, string $executorName = 'Неизвестный сотрудник'): void {
        $logMessage = sprintf(
            "%s - Сотрудник: %s - %s\n",
            date('Y-m-d H:i:s'),
            $executorName,
            is_array($message) ? print_r($message, true) : $message
        );
        error_log($logMessage, 3, $this->logFile);
    }
}

class RestApiClient {
    private const WEBHOOK_URL = 'https://bitrix.pricing.su/rest/1/08ycziwz54sv3tu3/';
    
    public function call(string $method, array $params = []): ?array {
        $queryUrl = self::WEBHOOK_URL . $method;
        $queryData = http_build_query($params);
        
        $curl = curl_init();
        curl_setopt_array($curl, [
            CURLOPT_SSL_VERIFYPEER => 0,
            CURLOPT_POST => 1,
            CURLOPT_HEADER => 0,
            CURLOPT_RETURNTRANSFER => 1,
            CURLOPT_URL => $queryUrl,
            CURLOPT_POSTFIELDS => $queryData,
        ]);
        
        $result = curl_exec($curl);
        curl_close($curl);
        
        return json_decode($result, true);
    }
}

class AddressHandler {
    public static function cleanAddress(?string $address): string {
        if (empty($address)) {
            return '';
        }
        $parts = explode('|', $address);
        return trim($parts[0]);
    }
    
    public static function prepareAddressData(string $address): array {
        return [
            'ADDRESS_1' => self::cleanAddress($address),
            'ADDRESS_2' => '',
            'CITY' => '',
            'POSTAL_CODE' => '',
            'REGION' => '',
            'PROVINCE' => '',
            'COUNTRY' => '',
        ];
    }
}

class RequisiteManager {
    private Logger $logger;
    private RestApiClient $apiClient;
    private $root;
    private string $executorName;
    
    public function __construct($root, string $executorName) {
        $this->logger = new Logger();
        $this->apiClient = new RestApiClient();
        $this->root = $root;
        $this->executorName = $executorName;
    }
    
    public function createRequisite(): void {
        $this->logger->log("=== Начало выполнения скрипта ===", $this->executorName);
        
        try {
            $mainFields = $this->prepareMainFields();
            $requisiteId = $this->createMainRequisite($mainFields);
            
            if ($requisiteId && $this->root->GetVariable('bank_name')) {
                $this->createBankDetails($requisiteId);
            }

            // Проверка и удаление пустых реквизитов
            $this->checkAndDeleteEmptyRequisites();
        } catch (\Exception $e) {
            $this->logger->log("Исключение при создании реквизита: " . $e->getMessage(), $this->executorName);
        }
        
        $this->logger->log("=== Завершение выполнения ===", $this->executorName);
    }
    
    private function prepareMainFields(): array {
        $addressYur = AddressHandler::cleanAddress($this->root->GetVariable('ADDRESS_ARRAY_YUR'));
        $addressPost = AddressHandler::cleanAddress($this->root->GetVariable('ADDRESS_ARRAY_POST'));
        $bankAddress = AddressHandler::cleanAddress($this->root->GetVariable('bank_address'));
        
        return [
            'PRESET_ID' => $this->root->GetVariable('PRESET_ID'),
            'NAME' => $this->root->GetVariable('NAME'),
            'ACTIVE' => 'Y',
            'ENTITY_TYPE_ID' => 4,
            'ENTITY_ID' => $this->root->GetVariable('ENTITY_ID'),
            'COUNTRY_ID' => $this->root->GetVariable('COUNTRY_ID'),
            'SORT' => 500,
            'RQ_ACCOUNTANT' => $this->root->GetVariable('ACCOUNTANT'),
            'RQ_COMPANY_FULL_NAME' => $this->root->GetVariable('COMPANY_FULL_NAME'),
            'RQ_COMPANY_NAME' => $this->root->GetVariable('company_name'),
            'RQ_COMPANY_REG_DATE' => $this->root->GetVariable('COMPANY_REG_DATE'),
            'RQ_DIRECTOR' => $this->root->GetVariable('DIRECTOR'),
            'RQ_EMAIL' => $this->root->GetVariable('EMAIL'),
            'RQ_FAX' => $this->root->GetVariable('FAX'),
            'RQ_INN' => $this->root->GetVariable('INN'),
            'RQ_KPP' => $this->root->GetVariable('cpmpany_KPP'),
            'RQ_OGRN' => $this->root->GetVariable('ogrn'),
            'RQ_OGRNIP' => $this->root->GetVariable('OGRNIP'),
            'RQ_OKPO' => $this->root->GetVariable('OKPO'),
            'RQ_OKTMO' => $this->root->GetVariable('OKTMO'),
            'RQ_OKVED' => $this->root->GetVariable('OKVED'),
            'RQ_PHONE' => $this->root->GetVariable('PHONE'),
            'RQ_ST_CERT_DATE' => $this->root->GetVariable('ST_CERT_DATE'),
            'RQ_ST_CERT_NUM' => $this->root->GetVariable('ST_CERT_NUM'),
            'RQ_BANK_ADDRESS' => $bankAddress,
            'RQ_BANK_BIK' => $this->root->GetVariable('bank_bik'),
            'RQ_BANK_CORR' => $this->root->GetVariable('bank_corr'),
            'RQ_BANK_INN' => $this->root->GetVariable('bank_inn'),
            'RQ_BANK_NAME' => $this->root->GetVariable('bank_name'),
            'RQ_BANK_TEL' => $this->root->GetVariable('bank_tel'),
            'RQ_ACC_NUM' => $this->root->GetVariable('acc_num'),
            'UF_CRM_1723550406' => $this->root->GetVariable('UF_CRM_1723550406'),
            'UF_CRM_1722846152' => $this->root->GetVariable('UF_CRM_1722846152'),
            'UF_CRM_1722846101' => $this->root->GetVariable('UF_CRM_1722846101'),
            'UF_CRM_1722849111' => $this->root->GetVariable('UF_CRM_1722849111'),
            'RQ_ADDR' => [
                '6' => AddressHandler::prepareAddressData($this->root->GetVariable('ADDRESS_ARRAY_YUR')),
                '1' => AddressHandler::prepareAddressData($this->root->GetVariable('ADDRESS_ARRAY_POST'))
            ]
        ];
    }
    
    private function createMainRequisite(array $fields): ?int {
        $this->logger->log("=== Данные для создания реквизита ===", $this->executorName);
        $this->logger->log($fields, $this->executorName);
        
        $requisite = new \Bitrix\Crm\EntityRequisite();
        $result = $requisite->add($fields);
        
        if ($result->isSuccess()) {
            $requisiteId = $result->getId();
            $this->logger->log("Реквизит успешно создан (ID: " . $requisiteId . ")", $this->executorName);
            $this->root->SetVariable('REQUISITE_ID', $requisiteId);
            return $requisiteId;
        }
        
        $this->logger->log("Ошибка создания реквизита: " . implode(', ', $result->getErrorMessages()), $this->executorName);
        return null;
    }
    
    private function createBankDetails(int $requisiteId): void {
        $bankFields = $this->prepareBankFields($requisiteId);
        
        $this->logger->log("=== Данные банковских реквизитов ===", $this->executorName);
        $this->logger->log($bankFields, $this->executorName);
        
        $bankResult = $this->apiClient->call('crm.requisite.bankdetail.add', ['fields' => $bankFields]);
        
        if (isset($bankResult['result'])) {
            $bankDetailId = $bankResult['result'];
            $this->logger->log("Банковские реквизиты успешно созданы (ID: " . $bankDetailId . ")", $this->executorName);
            $this->root->SetVariable('BANK_DETAIL_ID', $bankDetailId);
        } else {
            $this->logger->log("Ошибка создания банковских реквизитов: " . print_r($bankResult, true), $this->executorName);
        }
    }
    
    private function prepareBankFields(int $requisiteId): array {
        $bankFields = [
            'ENTITY_TYPE_ID' => 8,
            'ENTITY_ID' => $requisiteId,
            'COUNTRY_ID' => $this->root->GetVariable('PRESET_ID'),
            'NAME' => $this->root->GetVariable('bank_name'),
            'ACTIVE' => 'Y',
            'SORT' => 500,
            'RQ_BANK_NAME' => $this->root->GetVariable('bank_name'),
            'RQ_BANK_ADDR' => AddressHandler::cleanAddress($this->root->GetVariable('bank_address')),
            'RQ_BIK' => $this->root->GetVariable('bank_bik'),
            'RQ_ACC_NUM' => $this->root->GetVariable('acc_num'),
            'RQ_COR_ACC_NUM' => $this->root->GetVariable('bank_corr'),
            'RQ_BANK_INN' => $this->root->GetVariable('bank_inn'),
            'RQ_BANK_TEL' => $this->root->GetVariable('bank_tel'),
            'RQ_SWIFT' => $this->root->GetVariable('SWIFT')
        ];
        
        return array_filter($bankFields, function($value) {
            return !is_null($value) && $value !== '';
        });
    }

    private function checkAndDeleteEmptyRequisites(): void {
        $this->logger->log("=== Начало проверки реквизитов на пустые поля ===", $this->executorName);

        try {
            // Получаем все реквизиты компании
            $requisites = $this->apiClient->call('crm.requisite.list', [
                'filter' => ['ENTITY_ID' => $this->root->GetVariable('ENTITY_ID')],
                'select' => ['ID', 'RQ_COMPANY_NAME', 'RQ_COMPANY_FULL_NAME']
            ]);

            if (isset($requisites['result']) && is_array($requisites['result'])) {
                foreach ($requisites['result'] as $requisite) {
                    if (empty($requisite['RQ_COMPANY_NAME']) || empty($requisite['RQ_COMPANY_FULL_NAME'])) {
                        $this->deleteRequisite($requisite['ID']);
                    }
                }
            }
        } catch (\Exception $e) {
            $this->logger->log("Исключение при проверке реквизитов: " . $e->getMessage(), $this->executorName);
        }
    }

    private function deleteRequisite(int $requisiteId): void {
        $deleteResult = $this->apiClient->call('crm.requisite.delete', ['id' => $requisiteId]);
        
        if (isset($deleteResult['result']) && $deleteResult['result'] === true) {
            $this->logger->log("Реквизит успешно удален (ID: " . $requisiteId . ")", $this->executorName);
        } else {
            $this->logger->log("Ошибка удаления реквизита (ID: " . $requisiteId . "): " . print_r($deleteResult, true), $this->executorName);
        }
    }
}

// Точка входа в программу
if (CModule::IncludeModule('crm')) {
    $root = $this->GetRootActivity();
    
    $executor = $root->GetVariable('executor');
    $executorName = 'Неизвестный сотрудник';
    
    if (!empty($executor) && is_array($executor)) {
        if (isset($executor['NAME']) && isset($executor['LAST_NAME'])) {
            $executorName = trim($executor['NAME'] . ' ' . $executor['LAST_NAME']);
        } elseif (isset($executor['TITLE'])) {
            $executorName = $executor['TITLE'];
        }
    } else {
        global $USER;
        if (is_object($USER) && $USER->IsAuthorized()) {
            $executorName = $USER->GetFullName() ?: $USER->GetLogin();
        }
    }
    
    $requisiteManager = new RequisiteManager($root, $executorName);
    $requisiteManager->createRequisite();
}